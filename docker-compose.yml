version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: mist-ai-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: mistai2024
      MONGO_INITDB_DATABASE: mist-ai
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - mist-ai-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MIST AI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mist-ai-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:mistai2024@mongodb:27017/mist-ai?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: gpt-4
      OPENAI_MAX_TOKENS: 2000
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      LOG_LEVEL: info
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mist-ai-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Express (Optional - for database management)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: mist-ai-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: mistai2024
      ME_CONFIG_MONGODB_URL: mongodb://admin:mistai2024@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: mistai2024
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mist-ai-network
    profiles:
      - tools

  # Redis (Optional - for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: mist-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mist-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - cache

  # Nginx (Optional - for reverse proxy and load balancing)
  nginx:
    image: nginx:alpine
    container_name: mist-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - mist-ai-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  mist-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Development override
version: '3.8'
services:
  backend:
    profiles:
      - dev
    environment:
      NODE_ENV: development
      MONGODB_URI: mongodb://admin:mistai2024@mongodb:27017/mist-ai-dev?authSource=admin
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev


