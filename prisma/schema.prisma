// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String?   @unique
  firstName         String?
  lastName          String?
  fullName          String?
  avatar            String?
  phone             String?
  dateOfBirth       DateTime?
  gender            Gender?
  campus            String?   // SRM campus preference
  focus             String?   // Academic focus area
  role              UserRole  @default(STUDENT)
  isEmailVerified   Boolean   @default(false)
  isPhoneVerified   Boolean   @default(false)
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  loginCount        Int       @default(0)
  passwordHash      String?
  googleId          String?   @unique
  refreshToken      String?
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  chats             Chat[]
  messages          Message[]
  analytics         UserAnalytics[]
  feedback          Feedback[]
  notifications     Notification[]
  sessions          Session[]
  payments          Payment[]
  subscriptions     Subscription[]

  @@map("users")
}

model Chat {
  id          String    @id @default(cuid())
  title       String?
  userId      String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@map("chats")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  role      MessageRole
  chatId    String
  userId    String?
  metadata  Json?       // Store additional data like tokens used, model used, etc.
  createdAt DateTime    @default(now())

  // Relations
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model UserAnalytics {
  id              String    @id @default(cuid())
  userId          String
  date            DateTime  @default(now())
  messagesSent    Int       @default(0)
  messagesReceived Int      @default(0)
  totalTokens     Int       @default(0)
  sessionDuration Int?      // in seconds
  featuresUsed    String[]  // Array of features used
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_analytics")
}

model Feedback {
  id          String        @id @default(cuid())
  userId      String
  type        FeedbackType
  rating      Int?          // 1-5 rating
  comment     String?
  category    String?       // e.g., "admissions", "courses", "general"
  isResolved  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feedback")
}

model Notification {
  id          String            @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  isRead      Boolean           @default(false)
  metadata    Json?
  createdAt   DateTime          @default(now())

  // Relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Session {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  expiresAt   DateTime
  ipAddress   String?
  userAgent   String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  stripePaymentId String?
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subscription {
  id              String            @id @default(cuid())
  userId          String
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean         @default(false)
  stripeSubscriptionId String?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model SystemConfig {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("system_configs")
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  action      String
  resource    String?
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())

  @@map("audit_logs")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
  SUPER_ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum FeedbackType {
  BUG
  FEATURE_REQUEST
  GENERAL
  COMPLAINT
  COMPLIMENT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  TRIAL
}
